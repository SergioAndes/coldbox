import { Injector } from '@angular/core';
import { OktaConfig } from '../models/okta.config';
import { UserClaims } from '../models/user-claims';
import { TokenManager } from '../models/token-manager';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class OktaAuthService {
    private injector;
    private oktaAuth;
    private config;
    private observers;
    $authenticationState: Observable<boolean>;
    constructor(config: OktaConfig, injector: Injector);
    login(fromUri?: string, additionalParams?: object): any;
    getTokenManager(): TokenManager;
    /**
     * Checks if there is an access token OR an id token
     * A custom method may be provided on config to override this logic
     */
    isAuthenticated(): Promise<boolean>;
    private emitAuthenticationState;
    /**
     * Returns the current accessToken in the tokenManager.
     */
    getAccessToken(): Promise<string | undefined>;
    /**
     * Returns the current idToken in the tokenManager.
     */
    getIdToken(): Promise<string | undefined>;
    /**
     * Returns user claims from the /userinfo endpoint if an
     * accessToken is provided or parses the available idToken.
     */
    getUser(): Promise<UserClaims | undefined>;
    /**
     * Returns the configuration object used.
     */
    getOktaConfig(): OktaConfig;
    /**
     * Launches the login redirect.
     * @param fromUri
     * @param additionalParams
     */
    loginRedirect(fromUri?: string, additionalParams?: object): any;
    /**
     * Stores the intended path to redirect after successful login.
     * @param uri
     * @param queryParams
     */
    setFromUri(fromUri?: string): void;
    /**
     * Returns the referrer path from localStorage or app root.
     */
    getFromUri(): string;
    /**
     * Parses the tokens from the callback URL.
     */
    handleAuthentication(): Promise<void>;
    /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     * @param options
     */
    logout(options?: any): Promise<void>;
    /**
     * Scrub scopes to ensure 'openid' is included
     * @param scopes
     */
    scrubScopes(scopes: string[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OktaAuthService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<OktaAuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2t0YS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm9rdGEuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErREEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2t0YUNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9va3RhLmNvbmZpZyc7XG5pbXBvcnQgeyBVc2VyQ2xhaW1zIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXItY2xhaW1zJztcbmltcG9ydCB7IFRva2VuTWFuYWdlciB9IGZyb20gJy4uL21vZGVscy90b2tlbi1tYW5hZ2VyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE9rdGFBdXRoU2VydmljZSB7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBwcml2YXRlIG9rdGFBdXRoO1xuICAgIHByaXZhdGUgY29uZmlnO1xuICAgIHByaXZhdGUgb2JzZXJ2ZXJzO1xuICAgICRhdXRoZW50aWNhdGlvblN0YXRlOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogT2t0YUNvbmZpZywgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICBsb2dpbihmcm9tVXJpPzogc3RyaW5nLCBhZGRpdGlvbmFsUGFyYW1zPzogb2JqZWN0KTogYW55O1xuICAgIGdldFRva2VuTWFuYWdlcigpOiBUb2tlbk1hbmFnZXI7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZXJlIGlzIGFuIGFjY2VzcyB0b2tlbiBPUiBhbiBpZCB0b2tlblxuICAgICAqIEEgY3VzdG9tIG1ldGhvZCBtYXkgYmUgcHJvdmlkZWQgb24gY29uZmlnIHRvIG92ZXJyaWRlIHRoaXMgbG9naWNcbiAgICAgKi9cbiAgICBpc0F1dGhlbnRpY2F0ZWQoKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICBwcml2YXRlIGVtaXRBdXRoZW50aWNhdGlvblN0YXRlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgYWNjZXNzVG9rZW4gaW4gdGhlIHRva2VuTWFuYWdlci5cbiAgICAgKi9cbiAgICBnZXRBY2Nlc3NUb2tlbigpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBpZFRva2VuIGluIHRoZSB0b2tlbk1hbmFnZXIuXG4gICAgICovXG4gICAgZ2V0SWRUb2tlbigpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB1c2VyIGNsYWltcyBmcm9tIHRoZSAvdXNlcmluZm8gZW5kcG9pbnQgaWYgYW5cbiAgICAgKiBhY2Nlc3NUb2tlbiBpcyBwcm92aWRlZCBvciBwYXJzZXMgdGhlIGF2YWlsYWJsZSBpZFRva2VuLlxuICAgICAqL1xuICAgIGdldFVzZXIoKTogUHJvbWlzZTxVc2VyQ2xhaW1zIHwgdW5kZWZpbmVkPjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB1c2VkLlxuICAgICAqL1xuICAgIGdldE9rdGFDb25maWcoKTogT2t0YUNvbmZpZztcbiAgICAvKipcbiAgICAgKiBMYXVuY2hlcyB0aGUgbG9naW4gcmVkaXJlY3QuXG4gICAgICogQHBhcmFtIGZyb21VcmlcbiAgICAgKiBAcGFyYW0gYWRkaXRpb25hbFBhcmFtc1xuICAgICAqL1xuICAgIGxvZ2luUmVkaXJlY3QoZnJvbVVyaT86IHN0cmluZywgYWRkaXRpb25hbFBhcmFtcz86IG9iamVjdCk6IGFueTtcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgdGhlIGludGVuZGVkIHBhdGggdG8gcmVkaXJlY3QgYWZ0ZXIgc3VjY2Vzc2Z1bCBsb2dpbi5cbiAgICAgKiBAcGFyYW0gdXJpXG4gICAgICogQHBhcmFtIHF1ZXJ5UGFyYW1zXG4gICAgICovXG4gICAgc2V0RnJvbVVyaShmcm9tVXJpPzogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZWZlcnJlciBwYXRoIGZyb20gbG9jYWxTdG9yYWdlIG9yIGFwcCByb290LlxuICAgICAqL1xuICAgIGdldEZyb21VcmkoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgdG9rZW5zIGZyb20gdGhlIGNhbGxiYWNrIFVSTC5cbiAgICAgKi9cbiAgICBoYW5kbGVBdXRoZW50aWNhdGlvbigpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgdXNlciBzZXNzaW9uIGluIE9rdGEgYW5kIHJlbW92ZXNcbiAgICAgKiB0b2tlbnMgc3RvcmVkIGluIHRoZSB0b2tlbk1hbmFnZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKi9cbiAgICBsb2dvdXQob3B0aW9ucz86IGFueSk6IFByb21pc2U8dm9pZD47XG4gICAgLyoqXG4gICAgICogU2NydWIgc2NvcGVzIHRvIGVuc3VyZSAnb3BlbmlkJyBpcyBpbmNsdWRlZFxuICAgICAqIEBwYXJhbSBzY29wZXNcbiAgICAgKi9cbiAgICBzY3J1YlNjb3BlcyhzY29wZXM6IHN0cmluZ1tdKTogdm9pZDtcbn1cbiJdfQ==